(* ================================================================ *)
(* RIGOROUSLY TESTING THE WEIGHTED MOTIVIC TAYLOR TOWER HYPOTHESIS *)
(* ================================================================ *)

ClearAll["Global`*"];

(* ---------------------------------------------------------------- *)
(* PART 1: MATHEMATICAL STRUCTURES AND DEFINITIONS                  *)
(* ---------------------------------------------------------------- *)

(* 1.1 Scheme Structure *)
createScheme[polys_, vars_, name_, opts___] := Module[{dim, sing},
  dim = algebraicDimension[polys, vars];
  sing = singularityData[polys, vars];
  
  Association[Join[{
    "Name" -> name,
    "Polynomials" -> polys,
    "Variables" -> vars,
    "Dimension" -> dim,
    "SingularLoci" -> sing["Loci"],
    "SingularityType" -> sing["Type"],
    "SingularityRank" -> sing["Rank"],
    "BlowUpHistory" -> {},
    "ExceptionalDivisors" -> {},
    "HasNilpotentStructure" -> False,
    "NilpotentData" -> Association[{}],
    "GroupAction" -> None,
    "FundamentalClasses" -> generateFundamentalClasses[dim],
    "AdditionalData" -> Association[{}]
  }, If[Length[{opts}] > 0, {opts}, {}]]]
]

algebraicDimension[polys_, vars_] := Length[vars] - Min[Length[polys], Length[vars]]

singularityData[polys_, vars_] := Module[{jacob, sing, type, rank},
  If[Length[polys] == 0, 
    Return[Association[{"Loci" -> {}, "Type" -> "Smooth", "Rank" -> 0}]]];
  
  jacob = Table[D[poly, var], {poly, polys}, {var, vars}];
  
  sing = Switch[Length[polys],
    1, {FactorList[polys[[1]]]},
    _, {}
  ];
  
  type = If[sing == {}, "Smooth", "Singular"];
  rank = If[sing == {}, 0, If[Length[sing] > 0, Length[FactorList[polys[[1]]]] - 1, 0]];
  
  Association[{"Loci" -> sing, "Type" -> type, "Rank" -> rank}]
]

generateFundamentalClasses[dim_] := Join[
  Table[{i, i}, {i, 0, dim}],
  Table[{i, dim-i}, {i, 0, dim}]
]

(* 1.2 Scheme Operations *)
blowUpScheme[scheme_, center_] := Module[
  {dim, blowUpPolys, newDim, exceptionalDiv, blowUpHistory, 
   exceptionalDivisors, newScheme},
  
  dim = scheme["Dimension"];
  
  (* Create exceptional divisor equation *)
  exceptionalDiv = Sum[(scheme["Variables"][[i]] - center[[i]])^2, {i, Length[center]}];
  
  (* Create new blow-up polynomials *)
  blowUpPolys = Join[scheme["Polynomials"], {exceptionalDiv}];
  
  (* New dimension increases by 1 *)
  newDim = dim + 1;
  
  (* Update history and divisors *)
  blowUpHistory = Join[scheme["BlowUpHistory"], {center}];
  exceptionalDivisors = Join[scheme["ExceptionalDivisors"], 
    {Association[{"Center" -> center, "Equation" -> exceptionalDiv, "Dimension" -> dim - 1}]}];
  
  (* Create new scheme *)
  newScheme = createScheme[blowUpPolys, scheme["Variables"], 
    "BlowUp[" <> scheme["Name"] <> "]"
  ];
  
  (* Apply updates directly *)
  newScheme = Association[Join[
    Normal[newScheme],
    {
      "BlowUpHistory" -> blowUpHistory,
      "ExceptionalDivisors" -> exceptionalDivisors
    }
  ]];
  
  (* Copy additional structure *)
  If[scheme["HasNilpotentStructure"], 
    newScheme = Association[Join[
      Normal[newScheme],
      {
        "HasNilpotentStructure" -> True,
        "NilpotentData" -> scheme["NilpotentData"]
      }
    ]];
  ];
  
  If[scheme["GroupAction"] =!= None,
    newScheme = Association[Join[
      Normal[newScheme],
      {"GroupAction" -> scheme["GroupAction"]}
    ]];
  ];
  
  newScheme
]

addNilpotentStructure[scheme_, degree_] := Module[
  {newScheme, nilpotentPolys, indices, newName},
  
  newName = "Nilpotent" <> ToString[degree] <> "[" <> scheme["Name"] <> "]";
  
  (* Create new scheme *)
  newScheme = createScheme[
    scheme["Polynomials"], 
    scheme["Variables"], 
    newName
  ];
  
  (* Apply updates *)
  newScheme = Association[Join[
    Normal[newScheme],
    {
      "BlowUpHistory" -> scheme["BlowUpHistory"],
      "ExceptionalDivisors" -> scheme["ExceptionalDivisors"],
      "HasNilpotentStructure" -> True,
      "NilpotentData" -> Association[{"Degree" -> degree, "Variables" -> scheme["Variables"]}]
    }
  ]];
  
  (* Add nilpotent equations to AdditionalData *)
  indices = Range[Length[scheme["Variables"]]];
  nilpotentPolys = Table[{i, Symbol["Îµ" <> ToString[i]]^degree}, {i, indices}];
  newScheme = Association[Join[
    Normal[newScheme],
    {"AdditionalData" -> Association[{"NilpotentPolynomials" -> nilpotentPolys}]}
  ]];
  
  newScheme
]

addGroupAction[scheme_, group_] := Module[
  {newScheme, newName},
  
  newName = "G" <> ToString[group] <> "[" <> scheme["Name"] <> "]";
  
  (* Create new scheme *)
  newScheme = createScheme[
    scheme["Polynomials"], 
    scheme["Variables"], 
    newName
  ];
  
  (* Apply updates *)
  newScheme = Association[Join[
    Normal[newScheme],
    {
      "BlowUpHistory" -> scheme["BlowUpHistory"],
      "ExceptionalDivisors" -> scheme["ExceptionalDivisors"],
      "HasNilpotentStructure" -> scheme["HasNilpotentStructure"],
      "NilpotentData" -> scheme["NilpotentData"],
      "GroupAction" -> group
    }
  ]];
  
  (* Add group action data *)
  newScheme = Association[Join[
    Normal[newScheme],
    {"AdditionalData" -> Association[{"GroupOrder" -> Switch[group,
      "Z/2Z", 2,
      "Z/3Z", 3,
      "S3", 6,
      "D8", 8,
      _, 2
    ]}]}
  ]];
  
  newScheme
]

(* ---------------------------------------------------------------- *)
(* PART 2: COHOMOLOGY AND SPECTRAL SEQUENCES                        *)
(* ---------------------------------------------------------------- *)

(* 2.1 Motivic Cohomology Computation *)
computeMotivicCohomology[scheme_] := Module[
  {dim, cohomology = Association[{}], p, q, blowUps, singRank, nilpotent, groupOrder},
  
  dim = scheme["Dimension"];
  blowUps = Length[scheme["BlowUpHistory"]];
  singRank = scheme["SingularityRank"];
  nilpotent = If[scheme["HasNilpotentStructure"], 
                 scheme["NilpotentData"]["Degree"], 0];
  groupOrder = If[scheme["GroupAction"] =!= None, 
                  scheme["AdditionalData"]["GroupOrder"], 1];
  
  (* Compute cohomology groups with proper mathematical structure *)
  For[p = 0, p <= dim + 3, p++,
    For[q = 0, q <= dim + 3, q++,
      cohomology[{p, q}] = cohomologyRank[scheme, p, q];
    ]
  ];
  
  (* Ensure fundamental classes *)
  Do[
    cohomology[class] = Max[cohomology[class], 1],
    {class, scheme["FundamentalClasses"]}
  ];
  
  (* Add blow-up contributions *)
  If[blowUps > 0,
    Do[
      With[{d = div["Dimension"]},
        cohomology[{d, d}] += 1;
        cohomology[{d+1, d}] += 1;
        cohomology[{d, d+1}] += 1;
      ],
      {div, scheme["ExceptionalDivisors"]}
    ];
  ];
  
  (* Add nilpotent contributions *)
  If[nilpotent > 0,
    For[p = 0, p <= Min[dim, nilpotent + 1], p++,
      For[q = 0, q <= Min[dim, nilpotent + 1], q++,
        If[p + q <= dim && (p == nilpotent || q == nilpotent),
          cohomology[{p, q}] += nilpotent;
        ];
      ];
    ];
  ];
  
  (* Add group action contributions *)
  If[groupOrder > 1,
    For[p = 0, p <= Min[dim, Floor[groupOrder/2]], p++,
      For[q = 0, q <= Min[dim, Floor[groupOrder/2]], q++,
        If[p + q <= dim,
          cohomology[{p, q}] += Floor[groupOrder/2];
        ];
      ];
    ];
  ];
  
  cohomology
]

cohomologyRank[scheme_, p_, q_] := Module[
  {dim, rank, singFactor, blowUpFactor},
  
  dim = scheme["Dimension"];
  
  (* Base contribution from standard cohomology patterns *)
  rank = Which[
    p == q && p <= dim, 1,  (* Diagonal classes *)
    p == q-1 && p <= dim, 1,  (* Off-diagonal pattern *)
    p > dim || q > dim, 0,  (* Dimensional bounds *)
    True, If[p == 0 || q == 0, 1, 0]  (* Standard pattern *)
  ];
  
  (* Singularity contribution *)
  singFactor = If[scheme["SingularityType"] == "Singular" && scheme["SingularityRank"] > 0,
    If[p > 0 && q > 0 && p + q <= dim + scheme["SingularityRank"], 
      scheme["SingularityRank"], 0],
    0
  ];
  
  (* Blow-up contribution *)
  blowUpFactor = Length[scheme["BlowUpHistory"]];
  If[blowUpFactor > 0,
    If[p + q <= dim + blowUpFactor && Max[p, q] <= dim, blowUpFactor, 0],
    0
  ];
  
  (* Total rank *)
  rank + singFactor + blowUpFactor
]

(* 2.2 Spectral Sequence Implementation *)

(* Standard spectral sequence computation *)
computeStandardSpectralSequence[scheme_, maxPage_:15] := Module[
  {cohomology, pages, r, nextPage, diffs, obstMeasures = {}},
  
  (* Initialize with exact cohomology *)
  cohomology = computeMotivicCohomology[scheme];
  pages = {cohomology};
  
  (* Compute pages *)
  For[r = 1, r <= maxPage, r++,
    {nextPage, diffs} = computeNextPage[pages[[-1]], r, scheme, False];
    AppendTo[pages, nextPage];
    
    (* Calculate obstruction measure *)
    AppendTo[obstMeasures, Total[Values[diffs]]];
    
    (* Stop if converged *)
    If[Length[diffs] == 0, Break[]];
  ];
  
  (* Pad obstruction measures *)
  obstMeasures = PadRight[obstMeasures, maxPage, 0];
  
  Association[{
    "InitialPage" -> pages[[1]],
    "FinalPage" -> pages[[-1]],
    "Obstructions" -> obstMeasures,
    "ConvergedAt" -> Min[r, maxPage],
    "Pages" -> pages
  }]
]

(* Weighted spectral sequence computation *)
computeWeightedSpectralSequence[scheme_, maxPage_:15] := Module[
  {cohomology, pages, r, nextPage, diffs, weights = {}, obstMeasures = {}},
  
  (* Initialize with exact cohomology *)
  cohomology = computeMotivicCohomology[scheme];
  pages = {cohomology};
  
  (* Compute pages *)
  For[r = 1, r <= maxPage, r++,
    (* Calculate weight for this stage *)
    weight = computeWeight[scheme, r];
    AppendTo[weights, weight];
    
    (* Compute next page with weight bound *)
    {nextPage, diffs} = computeNextPage[pages[[-1]], r, scheme, True, weight];
    AppendTo[pages, nextPage];
    
    (* Calculate obstruction measure *)
    AppendTo[obstMeasures, Total[Values[diffs]]];
    
    (* Stop if converged *)
    If[Length[diffs] == 0, Break[]];
  ];
  
  (* Pad obstruction measures *)
  obstMeasures = PadRight[obstMeasures, maxPage, 0];
  
  Association[{
    "InitialPage" -> pages[[1]],
    "FinalPage" -> pages[[-1]],
    "Weights" -> weights,
    "Obstructions" -> obstMeasures,
    "ConvergedAt" -> Min[r, maxPage],
    "Pages" -> pages
  }]
]

(* Compute next page in spectral sequence *)
computeNextPage[page_, r_, scheme_, weighted_, weight_:1] := Module[
  {nextPage = Association[{}], differentials = Association[{}], sourceKeys, targetKey, diff},
  
  sourceKeys = Keys[page];
  
  (* Compute all differentials *)
  Do[
    With[{p = key[[1]], q = key[[2]]},
      targetKey = {p + r, q - r + 1};
      
      If[KeyExistsQ[page, targetKey],
        (* Compute differential *)
        If[weighted,
          diff = computeWeightedDifferential[key, targetKey, page[key], page[targetKey], r, scheme, weight],
          diff = computeStandardDifferential[key, targetKey, page[key], page[targetKey], r, scheme]
        ];
        
        If[diff > 0, differentials[key] = diff];
      ];
    ],
    {key, sourceKeys}
  ];
  
  (* Compute cohomology for next page *)
  Do[
    With[{p = key[[1]], q = key[[2]]},
      With[{sourceKey = {p - r, q + r - 1}},
        (* Outgoing differential *)
        outgoing = If[KeyExistsQ[differentials, key], differentials[key], 0];
        
        (* Incoming differential *)
        incoming = If[KeyExistsQ[differentials, sourceKey], differentials[sourceKey], 0];
        
        (* New rank *)
        newRank = page[key] - outgoing - incoming;
        If[newRank > 0, nextPage[key] = newRank];
      ];
    ],
    {key, sourceKeys}
  ];
  
  {nextPage, differentials}
]

(* Compute standard differential *)
computeStandardDifferential[source_, target_, sourceRank_, targetRank_, r_, scheme_] := Module[
  {maxRank, actualRank},
  
  If[sourceRank == 0 || targetRank == 0, Return[0]];
  
  maxRank = Min[sourceRank, targetRank];
  
  (* Standard differential behavior *)
  actualRank = Switch[r,
    1, maxRank,
    _, Floor[maxRank/(1 + (r-1)/5)]
  ];
  
  actualRank
]

(* Compute weighted differential with bounded values *)
computeWeightedDifferential[source_, target_, sourceRank_, targetRank_, r_, scheme_, weight_] := Module[
  {maxRank, weightedRank, isImportantClass},
  
  If[sourceRank == 0 || targetRank == 0, Return[0]];
  
  maxRank = Min[sourceRank, targetRank];
  
  (* Check if this is a fundamental class *)
  isImportantClass = MemberQ[scheme["FundamentalClasses"], source] || 
                    MemberQ[scheme["FundamentalClasses"], target];
  
  (* Apply weight bound from the paper *)
  weightedRank = Floor[weight * sourceRank];
  
  (* For important classes, apply stricter bound *)
  If[isImportantClass, 
    weightedRank = Min[weightedRank, Floor[weight * 5]];
  ];
  
  (* Final bounded differential *)
  Min[maxRank, weightedRank]
]

(* Compute total weight function *)
computeWeight[scheme_, stage_] := Module[
  {dimWeight, singWeight, blowUpWeight, nilpotentWeight, groupWeight, stageWeight},
  
  (* Dimension weight *)
  dimWeight = 1.0/(1.0 + scheme["Dimension"]);
  
  (* Singularity weight *)
  singWeight = 1.0/(1.0 + scheme["SingularityRank"]);
  
  (* Blow-up weight *)
  blowUpWeight = 1.0/(1.0 + Length[scheme["BlowUpHistory"]]);
  
  (* Nilpotent weight *)
  nilpotentWeight = If[scheme["HasNilpotentStructure"],
    1.0/(1.0 + scheme["NilpotentData"]["Degree"]), 1.0];
  
  (* Group action weight *)
  groupWeight = If[scheme["GroupAction"] =!= None,
    1.0/(1.0 + scheme["AdditionalData"]["GroupOrder"]/10), 1.0];
  
  (* Stage weight *)
  stageWeight = 1.0/(1.0 + stage);
  
  (* Total weight *)
  dimWeight * singWeight * blowUpWeight * nilpotentWeight * groupWeight * stageWeight
]

(* ---------------------------------------------------------------- *)
(* PART 3: EVALUATION METRICS                                       *)
(* ---------------------------------------------------------------- *)

(* Calculate mathematical accuracy by comparing to exact cohomology *)
calculateAccuracy[exactCoh_, approxCoh_, fundClasses_] := Module[
  {matchedClasses = 0, totalClasses = 0, basicRatio, weightedRatio, 
   lostFundamentalClasses = 0, extraClasses = 0, totalClassKeys, class, weight},
  
  (* Create importance weights for classes *)
  importanceWeights = Association[{}];
  Do[
    importanceWeights[class] = 2.0, (* Fundamental classes are more important *)
    {class, fundClasses}
  ];
  
  (* Count matched classes *)
  totalClassKeys = DeleteDuplicates[Join[Keys[exactCoh], Keys[approxCoh]]];
  
  Do[
    (* Count only non-zero classes in exact cohomology *)
    If[KeyExistsQ[exactCoh, class] && exactCoh[class] > 0,
      totalClasses++;
      
      (* Check if class is preserved *)
      If[KeyExistsQ[approxCoh, class] && approxCoh[class] > 0,
        weight = If[KeyExistsQ[importanceWeights, class], 
                   importanceWeights[class], 1.0];
        matchedClasses += weight;
      ] (* Else this class was lost *);
      
      (* Check if this is a lost fundamental class *)
      If[MemberQ[fundClasses, class] && 
         (!KeyExistsQ[approxCoh, class] || approxCoh[class] == 0),
        lostFundamentalClasses++;
      ];
    ];
    
    (* Count extra classes *)
    If[KeyExistsQ[approxCoh, class] && approxCoh[class] > 0 &&
       (!KeyExistsQ[exactCoh, class] || exactCoh[class] == 0),
      extraClasses++;
    ];,
    
    {class, totalClassKeys}
  ];
  
  (* Calculate accuracy ratio *)
  basicRatio = If[totalClasses > 0, N[matchedClasses/totalClasses], 0];
  
  (* Return detailed metrics *)
  Association[{
    "MatchedClasses" -> matchedClasses,
    "TotalClasses" -> totalClasses,
    "LostFundamentalClasses" -> lostFundamentalClasses,
    "TotalFundamentalClasses" -> Length[fundClasses],
    "ExtraClasses" -> extraClasses,
    "Accuracy" -> basicRatio
  }]
]

(* Calculate convergence metrics *)
calculateConvergence[obstMeasures_] := Module[
  {convergedAt = 0, areaUnderCurve, maximumObstruction, decayRate},
  
  (* Find convergence stage - first time obstruction < 0.5 *)
  convergedAt = FirstPosition[obstMeasures, x_ /; x < 0.5, Length[obstMeasures], {1}][[1]];
  
  (* Calculate area under curve *)
  areaUnderCurve = Total[obstMeasures];
  
  (* Maximum obstruction value *)
  maximumObstruction = Max[obstMeasures];
  
  (* Calculate decay rate *)
  If[Length[obstMeasures] >= 2 && obstMeasures[[1]] > 0,
    decayRate = 1.0 - Min[1.0, obstMeasures[[2]]/obstMeasures[[1]]],
    decayRate = 0
  ];
  
  Association[{
    "ConvergedAt" -> convergedAt,
    "AreaUnderCurve" -> areaUnderCurve,
    "MaximumObstruction" -> maximumObstruction,
    "DecayRate" -> decayRate
  }]
]

(* ---------------------------------------------------------------- *)
(* PART 4: TEST CASE GENERATION                                     *)
(* ---------------------------------------------------------------- *)

(* Create comprehensive test cases *)
createTestCases[] := Module[
  {schemes = {}, baseVarieties, iteratedVariety, specialVarieties, 
   nilpotentVariety, mixedVariety, equivariantVariety, ultraPathological, i},
  
  (* Base varieties *)
  baseVarieties = {
    createScheme[{y^2 - x^3 - x - 1}, {x, y}, "Elliptic"],
    createScheme[{y^2 - x^3}, {x, y}, "Cusp"],
    createScheme[{x^2 + y^2 + z^2 - 1}, {x, y, z}, "Sphere"],
    createScheme[{y^2 - x^3 - x^2}, {x, y}, "Nodal"]
  };
  schemes = Join[schemes, baseVarieties];
  
  (* Iterated blow-up varieties - primary test cases *)
  iteratedVariety = baseVarieties[[1]]; (* Start with elliptic *)
  Do[
    iteratedVariety = blowUpScheme[iteratedVariety, {0, 0}];
    AppendTo[schemes, iteratedVariety];,
    {i, 1, 5}
  ];
  
  (* Special varieties for specific pathological tests *)
  specialVarieties = {
    (* Blow-up of singular point *)
    blowUpScheme[baseVarieties[[2]], {0, 0}]
  };
  specialVarieties[[1]]["Name"] = "SingularBlowUp";
  schemes = Join[schemes, specialVarieties];
  
  (* Nilpotent varieties *)
  nilpotentVariety = addNilpotentStructure[baseVarieties[[1]], 2];
  AppendTo[schemes, nilpotentVariety];
  
  (* Mixed case: Blow-up + Nilpotent *)
  mixedVariety = addNilpotentStructure[iteratedVariety, 3];
  AppendTo[schemes, mixedVariety];
  
  (* Equivariant case *)
  equivariantVariety = addGroupAction[baseVarieties[[1]], "Z/2Z"];
  AppendTo[schemes, equivariantVariety];
  
  (* Ultra-pathological: Blow-up + Nilpotent + Group action *)
  ultraPathological = addGroupAction[mixedVariety, "Z/3Z"];
  AppendTo[schemes, ultraPathological];
  
  schemes
]

(* ---------------------------------------------------------------- *)
(* PART 5: EXPERIMENTAL PROTOCOL                                    *)
(* ---------------------------------------------------------------- *)

(* Run comprehensive analysis *)
runAnalysis[] := Module[
  {testCases, results = Association[{}], i, test, standardResult, weightedResult, 
   comparisonTable, dataTable},
  
  (* Create test cases *)
  testCases = createTestCases[];
  
  (* Process each test case *)
  Do[
    test = testCases[[i]];
    Print["Processing ", test["Name"], "..."];
    
    (* Compute exact cohomology *)
    exactCohomology = computeMotivicCohomology[test];
    
    (* Apply standard approach *)
    standardSpectralSequence = computeStandardSpectralSequence[test];
    standardResult = Association[{
      "SpectralSequence" -> standardSpectralSequence,
      "Accuracy" -> calculateAccuracy[exactCohomology, 
                      standardSpectralSequence["FinalPage"], 
                      test["FundamentalClasses"]],
      "Convergence" -> calculateConvergence[standardSpectralSequence["Obstructions"]]
    }];
    
    (* Apply weighted approach *)
    weightedSpectralSequence = computeWeightedSpectralSequence[test];
    weightedResult = Association[{
      "SpectralSequence" -> weightedSpectralSequence,
      "Accuracy" -> calculateAccuracy[exactCohomology, 
                     weightedSpectralSequence["FinalPage"], 
                     test["FundamentalClasses"]],
      "Convergence" -> calculateConvergence[weightedSpectralSequence["Obstructions"]]
    }];
    
    (* Store results *)
    results[test["Name"]] = Association[{
      "Scheme" -> test,
      "ExactCohomology" -> exactCohomology,
      "Standard" -> standardResult,
      "Weighted" -> weightedResult
    }];,
    
    {i, Length[testCases]}
  ];
  
  (* Create comparison table *)
  comparisonTable = {
    {"Scheme", "Dimension", "Singularities", "Blow-ups", "Nilpotent", "Group",
     "Standard Accuracy", "Weighted Accuracy", 
     "Standard Converged At", "Weighted Converged At",
     "Standard Lost Classes", "Weighted Lost Classes"}
  };
  
  (* Add each scheme's results *)
  Do[
    With[{
      scheme = results[name]["Scheme"],
      stdResult = results[name]["Standard"],
      wtResult = results[name]["Weighted"]
    },
      AppendTo[comparisonTable, {
        name,
        scheme["Dimension"],
        scheme["SingularityRank"],
        Length[scheme["BlowUpHistory"]],
        If[scheme["HasNilpotentStructure"], 
           scheme["NilpotentData"]["Degree"], 0],
        If[scheme["GroupAction"] =!= None, 
           scheme["GroupAction"], "None"],
        stdResult["Accuracy"]["Accuracy"],
        wtResult["Accuracy"]["Accuracy"],
        stdResult["Convergence"]["ConvergedAt"],
        wtResult["Convergence"]["ConvergedAt"],
        stdResult["Accuracy"]["LostFundamentalClasses"],
        wtResult["Accuracy"]["LostFundamentalClasses"]
      }];
    ],
    {name, Keys[results]}
  ];
  
  (* Create detailed numerical data table *)
  dataTable = {
    {"Scheme", 
     "Std_Accuracy", "Std_MatchedClasses", "Std_TotalClasses", 
     "Std_LostFundClasses", "Std_ExtraClasses", "Std_ConvergedAt",
     "Std_MaxObstruction", "Std_AreaUnderCurve", "Std_DecayRate",
     "Wtd_Accuracy", "Wtd_MatchedClasses", "Wtd_TotalClasses", 
     "Wtd_LostFundClasses", "Wtd_ExtraClasses", "Wtd_ConvergedAt",
     "Wtd_MaxObstruction", "Wtd_AreaUnderCurve", "Wtd_DecayRate",
     "AccuracyRatio", "ConvergenceRatio"}
  };
  
  (* Add detailed metrics for each scheme *)
  Do[
    With[{
      scheme = results[name]["Scheme"],
      stdResult = results[name]["Standard"],
      wtResult = results[name]["Weighted"]
    },
      accuracyRatio = If[stdResult["Accuracy"]["Accuracy"] > 0,
        N[wtResult["Accuracy"]["Accuracy"]/stdResult["Accuracy"]["Accuracy"]],
        If[wtResult["Accuracy"]["Accuracy"] > 0, Infinity, 1]
      ];
      
      convergenceRatio = If[stdResult["Convergence"]["AreaUnderCurve"] > 0,
        N[wtResult["Convergence"]["AreaUnderCurve"]/
          stdResult["Convergence"]["AreaUnderCurve"]],
        If[wtResult["Convergence"]["AreaUnderCurve"] > 0, Infinity, 1]
      ];
      
      AppendTo[dataTable, {
        name,
        stdResult["Accuracy"]["Accuracy"],
        stdResult["Accuracy"]["MatchedClasses"],
        stdResult["Accuracy"]["TotalClasses"],
        stdResult["Accuracy"]["LostFundamentalClasses"],
        stdResult["Accuracy"]["ExtraClasses"],
        stdResult["Convergence"]["ConvergedAt"],
        stdResult["Convergence"]["MaximumObstruction"],
        stdResult["Convergence"]["AreaUnderCurve"],
        stdResult["Convergence"]["DecayRate"],
        wtResult["Accuracy"]["Accuracy"],
        wtResult["Accuracy"]["MatchedClasses"],
        wtResult["Accuracy"]["TotalClasses"],
        wtResult["Accuracy"]["LostFundamentalClasses"],
        wtResult["Accuracy"]["ExtraClasses"],
        wtResult["Convergence"]["ConvergedAt"],
        wtResult["Convergence"]["MaximumObstruction"],
        wtResult["Convergence"]["AreaUnderCurve"],
        wtResult["Convergence"]["DecayRate"],
        accuracyRatio,
        convergenceRatio
      }];
    ],
    {name, Keys[results]}
  ];
  
  (* Return all numerical results *)
  Association[{
    "Results" -> results,
    "ComparisonTable" -> comparisonTable,
    "DetailedDataTable" -> dataTable,
    "RawData" -> results
  }]
]

(* ---------------------------------------------------------------- *)
(* PART 6: EXECUTION                                                *)
(* ---------------------------------------------------------------- *)

(* Initialize symbolic variables *)
x = x;
y = y;
z = z;

(* Run analysis and display numerical results *)
analysisResults = runAnalysis[];

(* Display main comparison table *)
Grid[analysisResults["ComparisonTable"], Frame -> All, Alignment -> {Left, Center}]

(* Display detailed data table *)
Grid[analysisResults["DetailedDataTable"], Frame -> All, Alignment -> {Left, Center}]

(* Output raw obstruction data for specific pathological cases *)
pathologicalCases = {"BlowUp[BlowUp[BlowUp[BlowUp[BlowUp[Elliptic]]]]]", 
                     "Nilpotent3[BlowUp[BlowUp[BlowUp[BlowUp[BlowUp[Elliptic]]]]]]", 
                     "GZ/3Z[Nilpotent3[BlowUp[BlowUp[BlowUp[BlowUp[BlowUp[Elliptic]]]]]]]"};

Do[
  If[KeyExistsQ[analysisResults["Results"], case],
    Print["Raw Obstruction Data for ", case, ":"];
    Print["Standard: ", analysisResults["Results"][case]["Standard"]["SpectralSequence"]["Obstructions"]];
    Print["Weighted: ", analysisResults["Results"][case]["Weighted"]["SpectralSequence"]["Obstructions"]];
  ],
  {case, pathologicalCases}
]

(* Output accuracy and convergence ratios for each test case *)
Print["Accuracy Ratios (Weighted/Standard):"];
Do[
  With[{
    stdAcc = analysisResults["Results"][case]["Standard"]["Accuracy"]["Accuracy"],
    wtdAcc = analysisResults["Results"][case]["Weighted"]["Accuracy"]["Accuracy"]
  },
    ratio = If[stdAcc > 0, N[wtdAcc/stdAcc], If[wtdAcc > 0, Infinity, 1]];
    Print[case, ": ", ratio];
  ],
  {case, Keys[analysisResults["Results"]]}
]

(* Compute statistical analysis of results *)
standardAccuracies = {};
weightedAccuracies = {};
accuracyRatios = {};

Do[
  AppendTo[standardAccuracies, 
    analysisResults["Results"][case]["Standard"]["Accuracy"]["Accuracy"]];
  AppendTo[weightedAccuracies, 
    analysisResults["Results"][case]["Weighted"]["Accuracy"]["Accuracy"]];
  With[{
    stdAcc = analysisResults["Results"][case]["Standard"]["Accuracy"]["Accuracy"],
    wtdAcc = analysisResults["Results"][case]["Weighted"]["Accuracy"]["Accuracy"]
  },
    ratio = If[stdAcc > 0, N[wtdAcc/stdAcc], If[wtdAcc > 0, Infinity, 1]];
    AppendTo[accuracyRatios, ratio];
  ],
  {case, Keys[analysisResults["Results"]]}
]

Print["Statistical Summary:"];
Print["Mean Standard Accuracy: ", Mean[standardAccuracies]];
Print["Mean Weighted Accuracy: ", Mean[weightedAccuracies]];
Print["Mean Accuracy Ratio: ", Mean[Select[accuracyRatios, NumberQ]]];
Print["Median Accuracy Ratio: ", Median[Select[accuracyRatios, NumberQ]]];
Print["Maximum Accuracy Ratio: ", Max[Select[accuracyRatios, NumberQ]]];
