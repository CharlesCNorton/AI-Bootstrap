from gudhi import SimplexTree
import numpy as np

# Define the mapping from S^5 to S^3
def sphere_mapping_extended(theta1, theta2, phi, params):
    a, b, c = params
    x = a * np.sin(theta1) * np.cos(phi) * np.sin(theta2)
    y = b * np.sin(theta1) * np.sin(phi) * np.cos(theta2)
    z = c * np.cos(theta1)
    w = np.sin(phi) * np.cos(theta1) * np.sin(theta2)
    return x, y, z, w

# Create a simplicial complex from points generated by the mapping
def create_simplicial_complex(theta1_values, theta2_values, phi_values, params):
    simplex_tree = SimplexTree()
    points = []

    # Generate points from the mapping
    for theta1 in theta1_values:
        for theta2 in theta2_values:
            for phi in phi_values:
                points.append(sphere_mapping_extended(theta1, theta2, phi, params))

    # Add vertices and edges to the simplicial complex
    for i, p in enumerate(points):
        simplex_tree.insert([i])  # Add vertices
        for j, q in enumerate(points[:i]):  # Add edges if within a certain distance
            distance = np.linalg.norm(np.array(p) - np.array(q))
            if distance < 1.0:  # Adjust the distance threshold for better connectivity
                simplex_tree.insert([i, j])

    return simplex_tree, points

# Compute persistent homology
def compute_persistent_homology(simplex_tree):
    persistence = simplex_tree.persistence()
    barcodes = simplex_tree.persistence_intervals_in_dimension(1)  # H1 features (loops)
    return persistence, barcodes

# Parameters
theta1_values = np.linspace(0, np.pi, 50)  # Higher resolution for theta1
theta2_values = np.linspace(0, np.pi, 50)  # Higher resolution for theta2
phi_values = np.linspace(0, 2 * np.pi, 50)  # Higher resolution for phi
initial_params = [1.0, 1.0, 1.0]

# Create a simplicial complex from the mapping
simplex_tree, points = create_simplicial_complex(theta1_values, theta2_values, phi_values, initial_params)

# Compute persistence
persistence, barcodes = compute_persistent_homology(simplex_tree)

# Output statistical summary of persistent features
print("Persistent Homology Analysis:")
if len(barcodes) > 0:
    for interval in barcodes:
        birth = interval[0]
        death = interval[1] if interval[1] != float('inf') else "Inf"
        print(f"  Feature in H1: Birth = {birth:.4f}, Death = {death}")
else:
    print("  No significant features found in H1 (loops).")

# Statistical Summary of Points
print(f"Total Points Generated: {len(points)}")
